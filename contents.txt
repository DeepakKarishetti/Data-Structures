CONTENTS:


 - Knowing basic data structures.

 - Understand and use most of C++ features.
	- Pointers and dynamic memory management.
	- Templates.
	- Inheritance.

 - Performance of algorithms.
	- Measure performance.
	- Analyze performance of algorithm.
	- Performance of algorithms and data structure operations.



Data structures:



 -> Linked list

	 - It is a linear data structure like arrays but not stored at contiguous locations.
	 - The elements in a linked list are linked using pointers. 
	 - Linked list structure consists of node objects and each node consists of one data value. Each node contains a pointer to the next node, and nodes can be independently created or destroyed.

	 - Applications:
		 - Low level data structure for implementing - stacks and queues.
		 - Linear contained for use when lots of cutting/splicing operations are important
		 - Keeping track of undo chains
		 - Other data structures - hashtables and graphs



 -> Stacks and queues

	 - Only permits operations at the ends.
	 - Easily implemented with linked lists.
	 - Lots of applications despite its simplicity.


	 -> Stacks (LIFO): #include <stack>

		 -  Three operations: top (look the top element), push (add element to the top of stack) and pop (remove top item from the stack), size(), empty().

		 - Applications: 
			 - Syntax analysis (Nested structures)
			 - Searching branching structures (trees and mazes)
			 - Programming languages or processors

	
	 -> Queues (FIFO): #include <queue>
	
		 - Adding an item to a queue: enqueue and removing an item from a queue: de-queue.
		 - Operations: push(), pop(), front(), back(), size(), empty().

		 - Applications:
			 - Anything to keep thiings in order by the time of arrival.
			 - Buffering character input 
			 - I/O request scheduling
			 - Event handling (GUI, simulations, etc.)



 -> Graphs
	
	 - It is a type of data structure that consists of a finite sets of vertices called as nodes and a finite set of ordered pairs called as edge which contain weight/value/cost.
	 - Graphs are used to represent many real-life applications. They are extensively used to represent networks.

	 - Two key algorithms used in graph search are:
		 - Depth-first search -> using recursion or stacks
		 - Breadth-first search -> easy with using queues
