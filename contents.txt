CONTENTS:


 - Knowing basic data structures.

 - Understand and use most of C++ features.
	- Pointers and dynamic memory management.
	- Templates.
	- Inheritance.

 - Performance of algorithms.
	- Measure performance.
	- Analyze performance of algorithm.
	- Performance of algorithms and data structure operations.



Data structures:



 -> Linked list

	 - It is a linear data structure like arrays but not stored at contiguous locations.
	 - The elements in a linked list are linked using pointers. 
	 - Linked list structure consists of node objects and each node consists of one data value. Each node contains a pointer to the next node, and nodes can be independently created or destroyed.

	 - Applications:
		 - Low level data structure for implementing - stacks and queues.
		 - Linear contained for use when lots of cutting/splicing operations are important
		 - Keeping track of undo chains
		 - Other data structures - hashtables and graphs



 -> Stacks and queues

	 - Only permits operations at the ends.
	 - Easily implemented with linked lists.
	 - Lots of applications despite its simplicity.


	 -> Stacks (LIFO): #include <stack>

		 -  Three operations: top (look the top element), push (add element to the top of stack) and pop (remove top item from the stack), size(), empty().

		 - Applications: 
			 - Syntax analysis (Nested structures)
			 - Searching branching structures (trees and mazes)
			 - Programming languages or processors

	
	 -> Queues (FIFO): #include <queue>
	
		 - Adding an item to a queue: enqueue and removing an item from a queue: de-queue.
		 - Operations: push(), pop(), front(), back(), size(), empty().

		 - Applications:
			 - Anything to keep thiings in order by the time of arrival.
			 - Buffering character input 
			 - I/O request scheduling
			 - Event handling (GUI, simulations, etc.)



 -> Graphs
	
	 - It is a type of data structure that consists of a finite sets of vertices called as nodes and a finite set of ordered pairs called as edge which contain weight/value/cost.
	 - Graphs are used to represent many real-life applications. They are extensively used to represent networks.

	 - Two key algorithms used in graph search are:
		 - Depth-first search -> using recursion or stacks
		 - Breadth-first search -> easy with using queues


 -> Recursion:
		
	 - Call a funtion from within a function as long as the base case is not satisfied.
	 - Having a base case is the most important part of recursion.
	 - Simple and is better than iteration if not for some storage and immediate results.

	 - Recursive decomposition:
		 - Reducing a problems into smaller sub problems and solving them ass as original problems.

	 - Recursion as induction:
		 - Basic form of recursion follows that of induction.
		 - If we solve for a problem of size n, then we can do the same with a problem of size n+1

 - Example: The Towers of Hanoi -> Uses both decomposition and induction.
 	    The maze problem
	    Minimax 

 - Divide and Conquer:
	 - Split the problem into multiple smaller problems
	 - Solve the sub problems recursively
	 - Recombine the solution afterwards
	 - Used only if splitting/recombination can be performed efficiently



Analysis of recursive algorithms
	 - Binary search
	 - Merge sort


 -> Binary search:
	
	 - Complexity before we get to length 1 = O(log n)
	 - Search for a value in a sorted list
			 - Start at the element present at the index number half of the total list size.
			 - If the element is less than the one looking for then go to the left half of the values or else to the right and search similarly at the half the size length of the list size element.
			 - This is recursively done until the element is found.

 -> Merge Sort:

	 - Height of the tree = log n and the time complexity = O(n*log n)
	 - Divide and conquer algorithm
	 - Split the input list into half
	 - Sort the halves recursively
	 - Merge the sorted lists



 -> SETS

	 - #include <set>

	 - Its an abstract data type for holding unique elemets, just another container for objects with no repetitions.

	 - Applications:
		 - Dictionary, compilers,spam filters, etc.

	Types:
		 - Ordered sets: 
			 - Items must be comparable and sorted
			 - Implemented using binary search trees

		 - Unordered sets:
			 - Typically faster than the ordered sets.
			 - Items are not sorted and in no particular order
			 - Implemented using hashtables



 -> MAPS

	 - #include <map>

	 - aka Dictionary or associative array
	 - Its an abstract data type for associating keys and values
	 - Keys can be unique while the values can be anything
	 - Built on sets having sets of key value pairs or associations
	 - Each key maps to one and only one value, whereas, values can be mapped to multiple keys
	 - Partial because we do not map all the possible keys

	 - Simliar to sets, maps are of types:
			
			 - Ordered maps
			 - Unordered maps



 -> HASHTABLE

	 - C++11 and later = unordered_set and unordered_map
	
	 - Date structure that allows very fast retrieval of data
	 - Used to index large amounts of data and is done using a hash function
	 - Address of each key is calculated using the key itself
	 - Collisions are resolved with open or closed addressing
	 - Open addressing involves linear search while the closed addressing involves using linked lists (called as chaining) containing data for a particular key having an index value
	 - Applications: 
		 - database indexing, compilers, caching, password authentication and more

	Basic idea:
		 - Create an array, vector or a similar container of some size
		 - For each key you want to store:
			 - Convert key to an integer (hash code)
			 - Index equals hash code mod the array size
			 - Store the key at the resulting index in array
		
		 - Most importantly avoid collisions

	 - A good hash function:
		 - Fast to compute
		 - Uses the entire object
		 - Seperates similar objects widely
		 - Random like


 - Dynamic array allocation:
	
	 - STACK : local variables, function arguments, return values. 'Grows down'.
		- holds 'stack frames' also known as 'activation records'
		- each function call results in a new stack frame
		- each stack frame contains memory for: 
			- local variable declared in the function
			- function parameters
			- return address for the function
		- when a function is called all of this memory is returned to the stack automatically


	 - HEAP : dynamically allocated memory (using new). 'Grows up'.
		- gets pieces of 'allocate memory' using new
		- pieces stay allocated until explicitly released by use of delete
		- heap memory has a lifetime independent of scope unlike the usual localvariables


	 - DATA SEGMENT : global and static variables, constants.
		- only ever one instance of them
		- get stored in their own special area
		- memory is pre-allocated and fixed in size


	 - TEXT SEGMENT : program code, read only




	-> Dynamic arrays are allocated using the 'new' keyword
		double *darray = new double[1024];

	->  Use the array pointer just like a regular array
		for (int i = 0; i < 1024; i++)
			darray[i] = 0.0;
	->  Deallocate arrays - Always clean up when you are done
		- delete[] darray;


 - Dynamic object allocation:

	 - Creating new class objects : STACK
		 - class_name var_name;
		
		 - Accessing the class objects created:
			 - var_name.parameter = value;
	

	 - Creating new class objects : HEAP
		
		 - (class_name*) var_name = new class_name/constructor;
	
		 - deleting the class objects created dynamically:
			 - delete var_name;
		 - Accessing the class objects created:
			 - (*var_name).parameter = value;
			OR
			 - var_name -> parameter = value;

	 - Destructor:

		 - the counterpart to constructor 
		 - name is ~ followed by the class name = ~class_name();
		 - never takes a parameter
	
		- A destructor is auton=matically called when:
			- A local (stack allocated) object goes out of scope
			- Delete is called on a dynamically allocated object

 - DONT'S in Dynamic memory:

	 - Never dereference a pointer which has not been set to a valid memory (using new or &)
	 - Never dereference a pointer to memory which has already been deallocated (a dangling pointer)
	 - Never change or lose a pointer which is pointing to dynamically allocated memory - or we won't be able to deallocate - causing a memory leak
	 - Never use delete on a pointer which isn't pointing to a dynamically allocated memory (dangling or a NULL pointer)



 -> ARRAY LIST:

	 - List data structure built on arrays having many array list operations like add, get, set, etc.
	 - We will be using dynamically allocted arrays
	 - Array size is the capacity and not the size of the array
	 - Encapsulating array list:	
		 - we need to keep array, size and capacity all together
		 - and maintain a consistent state

	 - Expanding the capacity of an array list:
		 - Double our capacity variable
		 - create a new array using the new capacity
		 - copy everything from the old array to the new array
		 - delete the old array
		 - update the array pointer to point to the new array



 -> OPERATOR OVERLOADING:

	 - A cpp feature that allows the programmer to redefine the meaning of an operator (when operating on class objects) is known as operator overloading.
	 - To overload an operator, a special operator function is defined inside the class that contains the following:
		
		 class classname
		 {
			...... ... ....
			public:
				return_type operator symbol (arguments)
				{
					... .. ...
				}
			... .. ...
		 };

		- return_type is the return type of the function
		- return_type of the function is followed by the operator keyword
	  	- symbol is the operator symbol you want to overload, like +,>,-,++
		- you can pass arguments to the operator function in similar way as functions


		- Cannot be used for built-in types like int, float, char, etc.
	  	- '=' and '&' are always overloaded in c++
		- The 4 operators that cannot be overloaded are: '::' (scope resolution), '.' (member selection), '.*' (member selection through pointer to function) and '?:' (ternary operator)



 -> The big 3 : RULE OF THREE IN C++

	 - This rule basically states that if a class defines one(or more) of the following, it should probably explicitly define all the three, which are:
		 - Destructor : called when the object goes out of scope
				
		 - Copy constructor : creates copies of the objects
				 - when passing by value
				 - when used in variable initializer

		 - Copy assignment operator : copies object over existing object in assignment
	 	


 -> GENERIC PROGRAMMING:

	- It is a style of computer programming in which algorithms are written in terms of types to-be-specified-later that are then instantiated when needed for specific types provided as parameters.
	- This kind of method is chosen to increase the code efficiency
	- This enables the user to write a general algorithm which will work for all data types
	- Advantages:
		 - code resuability
		 - avoid function overloading
		 - once written can be used for multiple times and cases

 - Generic programming can be implemented in C++ using TEMPLATES.



 -> TEMPLATES:
	
	 - Simple and a powerful tool in C++. The simple idea is to pass thedata type as a parameter so that we don't need to write the same code for different data types.
	- Everything must be #included

	-> Function templates 
	-> Class templates



 -> BINARY TREES:

	 - A tree is either empty or has a root node with one or more children, each of which is a tree.
	
	 - A binary tree is defined recursively.
	 - In a binary tree, if we pack the maximum number of nodes into a binary tree of height k, which is called as a full tree, we will have:
		1+2+4+....+2^k = 2^(k+1) - 1 nodes.

	 - The minimum height of a bonary tree with n nodes is O(log n)

	- Binary tree traversals : a traversal of a tree is the act of visiting every node in the tree once. There are three traversal orders:
		 - Pre-order : visit the root first and then the left and right sub-trees recursively
		 - In-order : visit the left sub-tree, the root, and then the right sub-tree
 		 - Post-order : visit the left and right sub-trees first and the root last
	

 -> BINARY SEARCH TREES:
	
	 - Data structures for holding comparable elements
		- efficient searching, insertion and deletion
		- underlying structure for sets, maps (BSTs)
		- Also used in database indexing (B-trees)

	 - Basic structure:
		- Nodes hold unique data values and pointers to child nodes
		- data acts as partitioning element in the tree
		 - child nodes/trees to the left of the data element have value less than the data element
		 - child nodes/trees to the right of have a value greater than the data element
		 - the left and right subtree each must be a binary search tree

	 - nodes contains strings
	 - left child subtree contains values less than the root
	 - root value is less than all child subtree values

	 - Operations:
		- Search : different order of traversal as binary trees
		- Insert
		- Delete (3 cases):
			- No child:
				- Find the item
				- Detach and delete

			- One child:
				- Find the item
				- Link child to parent
				- delete

			- Two children:
				- Find the item
				- Swap the rightmost item in left subtree
				- Remove the rightmost node in the left subtree

	 - AVL trees:
		 - It is  self balancing Binary Search Tree where the difference between heights of the left and right subtrees cannot be more than one for all nodes.	
		 - A recursive definition : left and right subtrees are height balanced


	- Analysis:
		 - Searching : number of recursive steps is <= height of the tree
		 - A tree with N nodes : 
			 - Best case = O(log N)
			 - Worst case = O(N)
	
		 - When trees are balanced:
			 - each subtree contains roughly half the nodes
			 - each step down the tree roughly halves the problem

	- Self balancing BST:
		- trees become unbalanced through a series of inserts and deleted
		- self balancing perform O(log N) or fewer operations to rebalance after insert and delete
		- eg : Red-Black trees, AVL trees, Splay trees

	
	- ROTATIONS:
		- Two basic operations are used to perform some re-balancing without violating the BST property : (keys(left) < key(root) < keys(right)) :
			 - Left rotation 
		 	 - Right rotation

	 - BST Applications:
		 - Linux kernel: schedulers, ext3 filesystem, virtual memory, many nore (Red-Black trees)
		 - Ordered set and map types (c++ STL, Java) & Red-Black trees
		 - Database indexing (B-trees)
		 - Filesystem metadata indexing (B-trees or R-B)
		


 -> INHERITANCE:
		
	 - Inheritance in c++ takes place between classes. In an inheritance (is-a) relationship, the class being inherited from is called the parent class and the class doing the inheriting is called the child class, derived class or the subclass.
	 - Anything defines in the superclass can be used by the child class
	 - Behaviours can also be inherited, leading to a very powerful code reuse.

	 - Classes can inherit from other classes:
		- Properties (variables)
		- Behaviour (methods)

	 - Inheritance serves various functions:
		- Modelling of class relationships
	 	- Code reuse
		- Subtyping/polymorphism

	 - Inheritance : Override:
		 - The behaviour defined in the super class can be changed in the sub class accordingly, but		
		 - We CANNOT override the properties
		 - We CANNOT change the return type of methods



 -> Inheritence : POLYMORPHISM

	 - The word polymorphism means having many forms.
	 - Polymorphism occurs when there is a hirearchy of classes and they are related by inheritance.
	 - C++ polymorphism means that a call to a member function will cause a different function to be executed depending on the type of the object that invokes the function.

	 - Virtual function : its a function in a base class that is declared using the keyword 'virtual'. This defined in a base class with another version in a derived class, signals to the compiler that we do not want static linkage for this function. Using this we want to call the function at any given point in the program based on the kind of object for which it is called. This sort of operation is referred to as dynamic linkage or late binding.

	 - Pure virtual function : In order to include a virtual function in a base class  so that it may be redefined in a derived class to suit the objects of that class, but do not have a good definition for the function, we simply write it as equivalent to 0 :
			=> virtual typename function() = 0;
	 - The =0 tells the compiler that the function has no body, and the above function will be called 'pure virtual function'.

	 
	 - Abstract classes : defines an abstract type which cannot be instantiated, but can be used as a base class

	 - Pure virtual methods are not defined in the abstract class.
	 - Children (non-abstract) of abstract classes must implement (override) any pure virtual methods.
	 - But we can use pure virtual methods in abstract class.


	 - Inheritance : Constructors
		 - Usually a subclass calls the default constructor (i.e. no parameters) of the super class before executing its own constructor.
		 - We can force the subclass to call a different constructor using this form in the definition.
